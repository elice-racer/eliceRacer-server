name: Deploy to ECS

on:
  push:
    branches:
      - main
      - feature/deploy

jobs:
  build-and-deploy:
    name: Build and Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - run: |
          yarn install --frozen-lockfile

      - name: Setup Task Definition
        run: |
          sed -i 's|<TASK_ROLE_ARN>|${{ secrets.TASK_ROLE_ARN }}|g' task-definition.json
          sed -i 's|<EXECUTION_ROLE_ARN>|${{ secrets.EXECUTION_ROLE_ARN }}|g' task-definition.json
          sed -i 's|<PARA_STORE_ARN>|${{ secrets.PARA_STORE_ARN }}|g' task-definition.json
        env:
          TASK_ROLE_ARN: ${{ secrets.TASK_ROLE_ARN }}
          EXECUTION_ROLE_ARN: ${{ secrets.EXECUTION_ROLE_ARN }}
          PARA_STORE_ARN: ${{ secrets.PARA_STORE_ARN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: prod-elicerracer
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task-definition.json
          container-name: elicerracer
          image: ${{ steps.build-image.outputs.image }}

          # image: ${{ steps.login-ecr.outputs.registry }}/elicerracer:${{ github.sha }}

      - name: Replace AWS Account ID in appspec.yaml
        run: |
          sed -i "s/ACCOUNT_ID/${{ secrets.AWS_ACCOUNT_ID }}/g" appspec.yaml

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: elicerracer
          cluster: prod-elicerracer
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          codedeploy-appspec: appspec.yaml
          codedeploy-application: prod-elicerracer
          codedeploy-deployment-group: prod-elicerracer
